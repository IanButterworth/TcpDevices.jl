var documenterSearchIndex = {"docs":
[{"location":"instruments/#Supported-Instruments","page":"Supported Instruments","title":"Supported Instruments","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"A list of all current supported instruments","category":"page"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"link to initialize\nlink to AgilentDSOX4034A","category":"page"},{"location":"instruments/#ImpedanceAnalyzer","page":"Supported Instruments","title":"ImpedanceAnalyzer","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"Agilent4395A","category":"page"},{"location":"instruments/#Oscilloscope","page":"Supported Instruments","title":"Oscilloscope","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"AgilentDSOX4034A","category":"page"},{"location":"instruments/#MultiMeter","page":"Supported Instruments","title":"MultiMeter","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"KeysightDMM34465A","category":"page"},{"location":"instruments/#PowerSupply","page":"Supported Instruments","title":"PowerSupply","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"TcpInstruments.AgilentE36312A\nVersatilePowerBench100_10XR\nPS310","category":"page"},{"location":"instruments/#WaveformGenerator","page":"Supported Instruments","title":"WaveformGenerator","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"Keysight33612A","category":"page"},{"location":"#TcpInstruments.jl","page":"TcpInstruments.jl","title":"TcpInstruments.jl","text":"","category":"section"},{"location":"","page":"TcpInstruments.jl","title":"TcpInstruments.jl","text":"Documentation for TcpInstruments.jl","category":"page"},{"location":"","page":"TcpInstruments.jl","title":"TcpInstruments.jl","text":"","category":"page"},{"location":"#Index","page":"TcpInstruments.jl","title":"Index","text":"","category":"section"},{"location":"","page":"TcpInstruments.jl","title":"TcpInstruments.jl","text":"","category":"page"},{"location":"","page":"TcpInstruments.jl","title":"TcpInstruments.jl","text":"Modules = [TcpInstruments]","category":"page"},{"location":"#TcpInstruments.TcpInstruments","page":"TcpInstruments.jl","title":"TcpInstruments.TcpInstruments","text":"TcpInstruments is an ongoing effort to provide a simple unified interface to common lab equipment.\n\nTo connect to an instrument use:\n\nhandle = initialize({Instrument-Type}, \"IP-ADDRESS:PORT\")\n\nTo prevent hardcoding in scripts and/or to make it simplier for your lab or organization to keep track of all the equipment and ip addresses a configuration file can also be specified.\n\nTo use Orchard Ultrasound's latest lab config use:\n\ncreate_config()\n\nThis will create a yaml file in your home directory: ~/.tcp.yml\n\nThis yaml file will be loaded everytime you use this package.\n\nYou can also create a project-specific config by creating the config in your project root directory instead of your home directory. You can do this with:\n\ncreate_config(pwd())\n\nOnce you have created a config file you can change it with\n\nedit_config()\n\nIf the instrument has its address in the config file you can now connect with: \n\nhandle = initialize({Instrument-Type})\n\nTo see the different types of devices you can interface with use help>Instrument.\n\n\n\n\n\n","category":"module"},{"location":"#TcpInstruments.Agilent4294A","page":"TcpInstruments.jl","title":"TcpInstruments.Agilent4294A","text":"http://literature.cdn.keysight.com/litweb/pdf/04294-90061.pdf\n\nAvailable functions\n\ninitialize()\nterminate()\nget_frequency_range()\n`setfrequencyrange([start, stop]) # in hertz)\nget_num_data_points(x)\nnumber of points on x-axis / number of samples\nset_num_data_points(x)\nget_impedance() # get the data\nset_volt_ac\nget_volt_ac\nget_volt_dc\nset_volt_dc\nbandwidth ({1,2,3,4,5})\n1 -> lowest bandwidth, 5 -> highest bandwidth\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.Agilent4395A","page":"TcpInstruments.jl","title":"TcpInstruments.Agilent4395A","text":"http://literature.cdn.keysight.com/litweb/pdf/04395-90031.pdf\n\nAvailable functions\n\ninitialize()\nterminate()\nget_frequency_range()\n`setfrequencyrange([start, stop]) # in hertz)\nget_num_data_points(x)\nnumber of points on x-axis / number of samples\nset_num_data_points(x)\nget_impedance() # get the data\nset_volt_ac\nget_volt_ac\nget_volt_dc\nset_volt_dc\nbandwidth ({1,2,3,4,5})\n1 -> lowest bandwidth, 35 -> highest bandwidth\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.AgilentE36312A","page":"TcpInstruments.jl","title":"TcpInstruments.AgilentE36312A","text":"Available functions\n\nenable_output()\ndisable_output()\nset_voltage(voltage)\nget_voltage()\nset_current_limit(current)\nget_current_limit()\nset_channel(channel)\nget_channel()\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.ImpedanceAnalyzer","page":"TcpInstruments.jl","title":"TcpInstruments.ImpedanceAnalyzer","text":"Supported Instruments:\n\nAgilent4395A\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.Instrument","page":"TcpInstruments.jl","title":"TcpInstruments.Instrument","text":"An instrument is a generic device with which you can take and read measurements\n\nAll instruments can be initialized and terminated. For more information on how to connect to a supported instrument:\n\nhelp>initialize\n\nYou can use the help feature on any supported instrument group.\n\nFor more information on the actual instruments you can initialize use julia's help feature on one of the supported instrument groups.\n\nFor example lets say you want to learn about oscilloscopes.\n\njulia>?\nhelp>Oscilloscope\n\n  Supported Instruments:\n  ≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\n\n    •  AgilentDSOX4034A\n\nPick one of the supported instruments for more information on how to use it and for all its available functions:\n\nhelp>AgilentDSOX4034A\n\nSupported Instrument Groups\n\nOscilloscope\nMultiMeter\nPowerSupply\nWaveformGenerator\nImpedanceAnalyzer\nXYZStage\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.Keysight33612A","page":"TcpInstruments.jl","title":"TcpInstruments.Keysight33612A","text":"Device has two channels: 1 & 2\n\nSupported functions\n\ninitialize()\nterminate()\nenable_output()\ndisable_output()\nget_output()\nget_frequency()\nset_frequency()\nget_amplitude()\nset_amplitude()\nget_burst_num_cycles()\nset_burst_num_cycles()\nget_time_offset(): Not implemented\nset_time_offset(): Not implemented\nget_voltage_offset()\nset_voltage_offset()\nget_burst_period()\nset_burst_period()\nget_mode()\nset_mode_burst(; mode=:trigger, trig_src=:timer)\nset_mode_cw()\n\nCreating a Sin Wave Example:\n\nwave = initialize(Keysight33612A, \"10.1.30.36\")\nset_mode_cw(wave) # Set to continuous waveform mode\nset_function(wave, \"SIN\")\nset_frequency(wave, \"1e3\") # Frequency val can be string or number\nset_amplitude(wave, 0.1)\nset_voltage_offset(wave, 0)\nenable_output(wave) # Starts wave\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.KeysightDMM34465A","page":"TcpInstruments.jl","title":"TcpInstruments.KeysightDMM34465A","text":"Available functions\n\ninitialize\nterminate\nget_tc_temperature (tc = thermocouple)\nget_voltage\nget_current\nget_resistance(;wire) # wire must be set to 2 or 4\nget_channel # (some kind of input detection not selection)\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.MultiMeter","page":"TcpInstruments.jl","title":"TcpInstruments.MultiMeter","text":"Supported Instruments\n\nKeysightDMM34465A\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.Oscilloscope","page":"TcpInstruments.jl","title":"TcpInstruments.Oscilloscope","text":"Supported Instruments\n\nAgilentDSOX4034A\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.PowerSupply","page":"TcpInstruments.jl","title":"TcpInstruments.PowerSupply","text":"Supported Instruments\n\nAgilentE36312A\nVersatilePower\nPS310\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.SRSPS310","page":"TcpInstruments.jl","title":"TcpInstruments.SRSPS310","text":"GPIB Enabled Device. Requires an attached Prologix Controller to work.\n\nAvailable functions\n\nenable_output()\ndisable_output()\nset_voltage(volts)\nget_voltage()\nset_voltage_limit(volts)\nget_voltage_limit()\nset_current_limit(current)\nget_current_limit()\nset_prologix_chan(chan)\nget_prologix_chan(chan)\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.VersatilePower","page":"TcpInstruments.jl","title":"TcpInstruments.VersatilePower","text":"This device only has one channel so channel specific functions and optional arguments are not available.\n\nAvailable functions\n\nenable_output()\ndisable_output()\nset_voltage(volts)\nget_voltage()\nsetcurrentlimit(current)\ngetcurrentlimit()\n\nHelpers\n\nremote_mode(): sets the device to remote mode. Automatically called on initialize\nlocal_mode(): sets the device to local mode. Automatically called on terminate\n\nThis instrument has a remote and local mode. Some commands do not work while the device is in local mode, thus when initializing this device remote_mode is called automatically and the device is always in remote mode by default.\n\nThese functions should not be directly needed but if for some reason you need to switch modes while using the device you can use local_mode to turn the device back to local mode.\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.WaveformGenerator","page":"TcpInstruments.jl","title":"TcpInstruments.WaveformGenerator","text":"Supported Instruments:\n\nKeysight33612A: Default ip ~ \"10.1.30.36\"\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.XYZStage","page":"TcpInstruments.jl","title":"TcpInstruments.XYZStage","text":"Supported Instruments:\n\nThorlabsLTS150\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.disable_output-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"TcpInstruments.jl","title":"TcpInstruments.disable_output","text":"This will disable an output on a device.\n\nIf the device has multiple channels it will disable the device for the currently selected channel. To see the channel that will effected use the get_channel function.\n\nIf you want to disable a different channel, first use set_channel to choose the channel. Running this function subsequently will disable that channel\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.disable_output-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"TcpInstruments.jl","title":"TcpInstruments.disable_output","text":"This will disable an output on a device.\n\nArguments:\n  - obj\n    - must be a Power Supply Instrument\nSupported Instruments:\n   - Power supply\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.disable_output-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"TcpInstruments.jl","title":"TcpInstruments.disable_output","text":"This will disable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.enable_output-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"TcpInstruments.jl","title":"TcpInstruments.enable_output","text":"This will enable an output on a device.\n\nIf the device has multiple channels it will enable the device for the currently selected channel. To see the channel that will effected use the get_channel function.\n\nIf you want to enable a different channel, first use set_channel to choose the channel. Running this function subsequently will enable that channel\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.enable_output-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"TcpInstruments.jl","title":"TcpInstruments.enable_output","text":"This will enable an output on a device.\n\nArguments:\n  - obj\n    - must be a Power Supply Instrument\nSupported Instruments:\n   - Power supply\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.enable_output-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"TcpInstruments.jl","title":"TcpInstruments.enable_output","text":"This will enable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.f_query-Tuple{Any,Any}","page":"TcpInstruments.jl","title":"TcpInstruments.f_query","text":"Writes a message to a device then listens for and returns any output from the device.\n\nThis is a blocking procedure and will block until a response is received from the device or till it has been blocking for longer than the designated timeout time after which an error will be thrown.\n\nArguments\n\ninstr::Instrument: Any instrument that supports being written to and read from\nmessage::AbstractString: The message to be sent to the device before listening for a response\ntimeout: Optional flag ~ How long to try and listen for a response before giving up and throwing an error. The default time is half a second. Note: if timeout is set to 0 then this will turn off the timeout functionality and query may listen/block indefinitely for a response\n\nDiffers from query in that it will return a Float64 and not a String\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_bandwith-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_bandwith","text":"Returns bandwidth level (1-5)\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_bandwith-Tuple{TcpInstruments.Instr{Agilent4395A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_bandwith","text":"Returns device bandwidth\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_burst_mode-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_burst_mode","text":"Returns the burst mode of a device:\n    \"TRIG\" ~ If the device is in Triggered Mode\n    \"GAT\" ~ If the device is in Gated Mode\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_burst_num_of_cycles-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_burst_num_of_cycles","text":"Returns number of cycles burst mode is set to\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_channel-Tuple{Instrument}","page":"TcpInstruments.jl","title":"TcpInstruments.get_channel","text":"This will return the global or default channel of a device.\n\nAllows you to see what the global channel is set to at the\nmoment\n\nParameters:\n  - obj\n    - must be a Power Supply Instrument\n  - chan\n    - This can be a string or int: 1, 2, 3 .. to n\n    where n is the total number of channels\n  - v\n    - optional boolean flag argument that is set to false\n    - setting to `true` will print the verbose channel name\n\nSupported Instruments:\n   - Power supply\n\nReturns:\n  String\n    - {\"1\"|\"2\"|...}\n    - when v == true: \"P6V\", .. etc\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_channel-Tuple{TcpInstruments.Instr{Agilent4395A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_channel","text":"Returns 1 or 2 depending on current channel\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_channel-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_channel","text":"This will return the global or default channel of a device.\n\nAllows you to see what the global channel is set to at the moment\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\nv\noptional boolean flag argument that is set to false\nsetting to true will print the verbose channel name\n\nSupported Instruments:\n\nPower supply\n\nReturns:   String     - {\"1\"|\"2\"|...}     - when v == true: \"P6V\", .. etc\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_channel-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_channel","text":"Indicates which input terminals are selected on the front panel Front/Rear switch. This switch is not programmable; this query reports the position of the switch, but cannot change it.\n\nDo not toggle the Front/Rear switch with active signals on the terminals. This switch is not intended to be used in this way and may be damaged by high voltages or currents, possibly compromising the instrument's safety features.\n\nReturns\n\n\"FRON\" or \"REAR\"\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_coupling-Tuple{Instrument}","page":"TcpInstruments.jl","title":"TcpInstruments.get_coupling","text":"get_coupling(scope, chan=1)\n\nreturns \"AC\" or \"DC\"\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_current-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_current","text":"Returns current\n\nArguments\n\ntype: \"DC\" | \"AC\"\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_current_limit-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_current_limit","text":"This will return the current limit of a device.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Current Limit\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_current_limit-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_current_limit","text":"This will return the current limit of a device.\n\n\nSupported Instruments:\n   - Power supply\n\nReturns:\n  Current Limit\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_current_limit-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_current_limit","text":"This will return the current limit of a device.\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Current Limit\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_impedance-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_impedance","text":"P. 188 Must be in ZA mode IMPH COMP\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_impedance-Tuple{TcpInstruments.Instr{Agilent4395A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_impedance","text":"P. 3-10\n\nError corrected data The results of error correction are stored in the data arrays as complex number pairs. Formatted data\n\nThis is the array of data being displayed. It reflects all post-processing functions such as electrical delay, and the units of the array read out depends on the current display format.\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_lpf_state-Tuple{Instrument}","page":"TcpInstruments.jl","title":"TcpInstruments.get_lpf_state","text":"get_lpf_state(scope, chan=1)\n\nSee state the internal low-pass filter:\n\nreturns \"0\" or \"1\"\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_mode-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_mode","text":"Returns:     \"CW\" ~ if device is in continous wavefrom mode     \"BURST\" ~ if device is in BURST mode\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_output-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_output","text":"This will return the state of an output on a device.\n\nIf the device has multiple channels is will display the state of the currently selected channel. To see the channel that will read use the get_channel function.\n\nIf you want to see the state of a different channel, first use set_channel to choose the channel. Running this function subsequently will disable that channel\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\nReturns:   String: {\"0\"|\"1\"}\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_output-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_output","text":"This will disable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\nReturns\n\ntrue if High Voltage Output is Off\nfalse if High Voltage Output is On\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_output-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_output","text":"This will return the state of an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\nReturns:   String: {\"OFF\"|\"ON\"}\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_resistance-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_resistance","text":"Returns resistance\n\nArguments\n\ntype: \"DC\" | \"AC\"\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_tc_temperature-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_tc_temperature","text":"get_tc_temperature(multimeter)\n\nPage. 288\n\nPerform take a measurement with the probe mode set to thermocouple\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_temp_unit-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_temp_unit","text":"get_temp_unit(multimeter)\n\nReturns C, F or K depending on the set temperature unit\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_volt_ac-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_volt_ac","text":"Returns oscillator (ac) voltage\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_voltage","text":"This will return the voltage of a device's channel.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Voltage\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_voltage","text":"Returns voltage\n\nArguments\n\ntype: \"DC\" | \"AC\"\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_voltage","text":"This will return the voltage of a device\n\nVoltage Limit: 1250V\n\nSupported Instruments:\n   - Power supply\n\nReturns:\n  Voltage\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_voltage","text":"This will return the voltage of a device\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Voltage\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.get_voltage_limit-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"TcpInstruments.jl","title":"TcpInstruments.get_voltage_limit","text":"This will return the voltage limit of a device\n\nVoltage Limit: 1250V\n\nSupported Instruments:\n   - Power supply\n\nReturns:\n  Voltage\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.initialize-Tuple{Any,Any}","page":"TcpInstruments.jl","title":"TcpInstruments.initialize","text":"initialize(model, address)\n\nInitializes a connection to the instrument at the given (input) IP address.\n\nArguments\n\nmodel: They device type you are connecting to. Use help>Instrument to see available options.\naddress::String: The ip address of the device. Ex. \"10.3.30.23\"\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.lpf_off","page":"TcpInstruments.jl","title":"TcpInstruments.lpf_off","text":"lpf_off(scope, chan=1)\n\nTurn off an internal low-pass filter.\n\n\n\n\n\n","category":"function"},{"location":"#TcpInstruments.lpf_on","page":"TcpInstruments.jl","title":"TcpInstruments.lpf_on","text":"lpf_on(scope, chan=1)\n\nTurn on an internal low-pass filter. When the filter is on, the bandwidth of the specified channel is limited to approximately 25 MHz.\n\n\n\n\n\n","category":"function"},{"location":"#TcpInstruments.query-Tuple{Instrument,AbstractString}","page":"TcpInstruments.jl","title":"TcpInstruments.query","text":"Writes a message to a device then listens for and returns any output from the device.\n\nThis is a blocking procedure and will block until a response is received from the device or till it has been blocking for longer than the designated timeout time after which an error will be thrown.\n\nArguments\n\ninstr::Instrument: Any instrument that supports being written to and read from\nmessage::AbstractString: The message to be sent to the device before listening for a response\ntimeout: Optional flag ~ How long to try and listen for a response before giving up and throwing an error. The default time is half a second. Note: if timeout is set to 0 then this will turn off the timeout functionality and query may listen/block indefinitely for a response\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.run-Union{Tuple{TcpInstruments.Instr{T}}, Tuple{T}} where T<:Oscilloscope","page":"TcpInstruments.jl","title":"TcpInstruments.run","text":"run(scope)\n\nRun Oscilloscope\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_bandwith-Tuple{TcpInstruments.Instr{Agilent4294A},Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_bandwith","text":"Pg. 274\n\n(Initial value) Specifies bandwidth 1 (shortest measurement time)\nSpecifies bandwidth 2\nSpecifies bandwidth 3\nSpecifies bandwidth 4\nSpecifies bandwidth 5 (longest measurement time, accurate\n\nmeasurement).\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_bandwith-Tuple{TcpInstruments.Instr{Agilent4395A},Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_bandwith","text":"Pg.  B-3\n\n2, 10, 30, 100, 300, 1000 (=1k), 3000 (=3k), 10000 (=10k), 30000 (=30k) (Network and impedance analyzers)\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_burst_mode_gated-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"TcpInstruments.jl","title":"TcpInstruments.set_burst_mode_gated","text":"Sets the burst mode of a device to Gated Mode\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_burst_mode_trigger-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"TcpInstruments.jl","title":"TcpInstruments.set_burst_mode_trigger","text":"Sets the burst mode of a device to Triggered Mode\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_burst_num_of_cycles-Tuple{TcpInstruments.Instr{Keysight33612A},Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_burst_num_of_cycles","text":"Sets the number of cycles for burst mode\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_burst_period-Tuple{Any,Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_burst_period","text":"chan=<1|2>\n\nnum = {<seconds>|MINimum|MAXimum}\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_channel-Tuple{Instrument}","page":"TcpInstruments.jl","title":"TcpInstruments.set_channel","text":"This will set the global channel on a device.\n\nAny commands like set_voltage that affect the\ndevice with respect to a specific channel will be impacted\nby this command.\n\nBy setting the channel on a device, all subsequent commands\nwill operate on that channel unless they allow for an optional channel argument.\n\nParameters:\n  - obj\n    - must be a Power Supply Instrument\n  - chan\n    - This can be a string or int: 1, 2, 3 .. to n\n    where n is the total number of channels\n\nSupported Instruments:\n   - Power supply\n\nReturns:\n  Nothing\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_channel-Tuple{TcpInstruments.Instr{Agilent4395A},Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_channel","text":"set_channel(i, channel_number)\n\nUses.\n\nset_channel(i, 1)\n\nset_channel(i, 2)\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_channel-Tuple{TcpInstruments.Instr{AgilentE36312A},Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_channel","text":"This will set the global channel on a device.\n\nAny commands like set_voltage that affect the device with respect to a specific channel will be impacted by this command.\n\nBy setting the channel on a device, all subsequent commands will operate on that channel unless they allow for an optional channel argument.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_current_limit-Tuple{TcpInstruments.Instr{AgilentE36312A},Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_current_limit","text":"This will change the current limit of a device on a given  channel\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nnum\ninteger or decimal of the desired current limit\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_current_limit-Tuple{TcpInstruments.Instr{SRSPS310},Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_current_limit","text":"This will change the current limit of a device \n\nMIN Value: 0\nMax Value: { 2.1e-3 | 0.021 } (21mA)\n\nSupported Instruments:\n   - Power supply\n\nReturns:\n  Nothing\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_current_limit-Tuple{TcpInstruments.Instr{VersatilePower},Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_current_limit","text":"This will change the current limit of a device \n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_function-Tuple{TcpInstruments.Instr{Keysight33612A},Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_function","text":"Acceptable inputs {SINusoid|SQUare|TRIangle|RAMP|PULSe|PRBS|NOISe|ARB|DC}\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_impedance_1Mohm-Tuple{Instrument}","page":"TcpInstruments.jl","title":"TcpInstruments.set_impedance_1Mohm","text":"set_impedance_1Mohm(scope, chan=1)\n\nSet impedance to 1MΩ\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_impedance_50ohm-Tuple{Instrument}","page":"TcpInstruments.jl","title":"TcpInstruments.set_impedance_50ohm","text":"set_impedance_50ohm(scope, chan=1)\n\nSet impedance to 50Ω\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_mode_burst-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"TcpInstruments.jl","title":"TcpInstruments.set_mode_burst","text":"    set_mode_burst(instr)\n\nChanges Waveform Generator mode from continous waveform to burst\n\nBy default it sets the type of burst mode to triggered mode. Gated mode can also be set by using the optional flag:\n\n    set_mode_burst(instr; mode=:gated)\n\nThe optional trig_src flag sets the trigger source for burst triggered mode. Right now the default is Timer. To implement more trigger sources see page 130 of the manual for 33612A\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_mode_cw-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"TcpInstruments.jl","title":"TcpInstruments.set_mode_cw","text":"Puts the device in continuous waveform/turns off burst mode\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_tc_type-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"TcpInstruments.jl","title":"TcpInstruments.set_tc_type","text":"set_tc_type(multimeter; type=\"K\")\n\nArguments\n\ntype: Can be E, J, K, N, R, T (Defaults to K)\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_temp_unit_celsius-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"TcpInstruments.jl","title":"TcpInstruments.set_temp_unit_celsius","text":"set_temp_unit_celsius(multimeter)\n\nSets the temperature unit to celcius\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_temp_unit_farenheit-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"TcpInstruments.jl","title":"TcpInstruments.set_temp_unit_farenheit","text":"set_temp_unit_farenheit(multimeter)\n\nSets the temperature unit to farenheit\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_temp_unit_kelvin-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"TcpInstruments.jl","title":"TcpInstruments.set_temp_unit_kelvin","text":"set_temp_unit_kelvin(multimeter)\n\nSets the temperature unit to kelvin\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_volt_ac-Tuple{TcpInstruments.Instr{Agilent4294A},Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_volt_ac","text":"Range For voltage setting: 5E-3 to 1\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_voltage-Tuple{TcpInstruments.Instr{AgilentE36312A},Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_voltage","text":"This will change the voltage output voltage of a device.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nnum\ninteger or decimal of the desired voltage\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_voltage-Tuple{TcpInstruments.Instr{SRSPS310},Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_voltage","text":"This will change the voltage output of a device.\n\nVoltage Limit: The value of getvoltagelimit()\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_voltage-Tuple{TcpInstruments.Instr{VersatilePower},Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_voltage","text":"This will change the voltage output of a device.\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.set_voltage_limit-Tuple{TcpInstruments.Instr{SRSPS310},Any}","page":"TcpInstruments.jl","title":"TcpInstruments.set_voltage_limit","text":"set_voltage_limit(::SRSPS310, voltage_limit)\n\nThis will change the voltage limit of a device.\n\nMax Voltage Limit: 1250V\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.split_str_into_host_and_port-Tuple{AbstractString}","page":"TcpInstruments.jl","title":"TcpInstruments.split_str_into_host_and_port","text":"split_str_into_host_and_port(str)\n\nSplits a string like \"192.168.1.1:5056\" into (\"192.168.1.1\", 5056)\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.stop-Union{Tuple{TcpInstruments.Instr{T}}, Tuple{T}} where T<:Oscilloscope","page":"TcpInstruments.jl","title":"TcpInstruments.stop","text":"stop(scope)\n\nStop Oscilloscope\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments.terminate-Tuple{Instrument}","page":"TcpInstruments.jl","title":"TcpInstruments.terminate","text":"terminate(instr)\n\nCloses the TCP connection.\n\n\n\n\n\n","category":"method"}]
}
