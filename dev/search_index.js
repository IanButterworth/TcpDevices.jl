var documenterSearchIndex = {"docs":
[{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"CurrentModule = TcpInstruments","category":"page"},{"location":"instruments/#Supported-Instruments","page":"Supported Instruments","title":"Supported Instruments","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"A list of all current supported instruments","category":"page"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"link to initialize\nlink to AgilentDSOX4034A","category":"page"},{"location":"instruments/#ImpedanceAnalyzer","page":"Supported Instruments","title":"ImpedanceAnalyzer","text":"","category":"section"},{"location":"instruments/#Oscilloscope","page":"Supported Instruments","title":"Oscilloscope","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"Oscilloscope","category":"page"},{"location":"instruments/#TcpInstruments.Oscilloscope","page":"Supported Instruments","title":"TcpInstruments.Oscilloscope","text":"Supported Instruments\n\nAgilentDSOX4024A\nAgilentDSOX4034A\n\n\n\n\n\n","category":"type"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) === DataType && t <: Oscilloscope && typeof(t) != Oscilloscope","category":"page"},{"location":"instruments/#TcpInstruments.AgilentDSOX4024A","page":"Supported Instruments","title":"TcpInstruments.AgilentDSOX4024A","text":"Available Functions\n\ninitialize\nterminate\nget_data\nlpf_on\nlpf_off\nget_lpf_state\nset_impedance_1Mohm\nset_impedance_50ohm\nget_impedance\n\nExample\n\n> scope_h = initialize(AgilentDSOX4024A)\n\nGrab data from channel 1\n\n> data = get_data(scope_h, 1)\n\nGrab data from channel 2 and 4\n\n> data_array = get_data(scope_h, [2,4])\n\nGrab data from all available channels Plot waves from all available channels\n\n> using Plots\n> data_array = get_data(scope_h)\n> plot(data_struct)\n\nLow Pass Filter Turn on Low Pass Filter 25\n\n> lpf_on(scope)\n\nCheck if low pass filter is on\n\n> get_lpf_state(scope) == \"1\"\n\nTurn on Low Pass Filter 25MHz\n\n> lpf_off(scope)\n> get_lpf_state(scope) == \"0\"\n\nImpedance\n\n> set_impedance_1Mohm(scope_h)\n> get_impedance(scope_h) == ONEM\n> set_impedance_50ohm(scope_h)\n> get_impedance(scope_h) == FIFT\n\nTerminate TCP connection\n\n> terminate(scope_h)\n\n\n\n\n\n","category":"type"},{"location":"instruments/#TcpInstruments.AgilentDSOX4034A","page":"Supported Instruments","title":"TcpInstruments.AgilentDSOX4034A","text":"Available Functions\n\ninitialize\nterminate\nget_data\nlpf_on\nlpf_off\nget_lpf_state\nset_impedance_1Mohm\nset_impedance_50ohm\nget_impedance\n\nExample\n\n> scope_h = initialize(AgilentDSOX4034A)\n\nGrab data from channel 1\n\n> data = get_data(scope_h, 1)\n\nGrab data from channel 2 and 4\n\n> data_array = get_data(scope_h, [2,4])\n\nGrab data from all available channels Plot waves from all available channels\n\n> using Plots\n> data_array = get_data(scope_h)\n> plot(data_struct)\n\nLow Pass Filter Turn on Low Pass Filter 25\n\n> lpf_on(scope)\n\nCheck if low pass filter is on\n\n> get_lpf_state(scope) == \"1\"\n\nTurn on Low Pass Filter 25MHz\n\n> lpf_off(scope)\n> get_lpf_state(scope) == \"0\"\n\nImpedance\n\n> set_impedance_1Mohm(scope_h)\n> get_impedance(scope_h) == ONEM\n> set_impedance_50ohm(scope_h)\n> get_impedance(scope_h) == FIFT\n\nTerminate TCP connection\n\n> terminate(scope_h)\n\n\n\n\n\n","category":"type"},{"location":"instruments/#MultiMeter","page":"Supported Instruments","title":"MultiMeter","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"MultiMeter","category":"page"},{"location":"instruments/#TcpInstruments.MultiMeter","page":"Supported Instruments","title":"TcpInstruments.MultiMeter","text":"Supported Instruments\n\nKeysightDMM34465A\n\n\n\n\n\n","category":"type"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) === DataType && t <: MultiMeter && typeof(t) != MultiMeter","category":"page"},{"location":"instruments/#TcpInstruments.KeysightDMM34465A","page":"Supported Instruments","title":"TcpInstruments.KeysightDMM34465A","text":"Available functions\n\ninitialize\nterminate\nget_tc_temperature (tc = thermocouple)\nget_voltage\nget_current\nget_resistance(;wire) # wire must be set to 2 or 4\nget_channel # (some kind of input detection not selection)\n\n\n\n\n\n","category":"type"},{"location":"instruments/#PowerSupply","page":"Supported Instruments","title":"PowerSupply","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"PowerSupply","category":"page"},{"location":"instruments/#TcpInstruments.PowerSupply","page":"Supported Instruments","title":"TcpInstruments.PowerSupply","text":"Supported Instruments\n\nAgilentE36312A\nVersatilePower\nPS310\n\n\n\n\n\n","category":"type"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) === DataType && t <: PowerSupply && typeof(t) != PowerSupply","category":"page"},{"location":"instruments/#TcpInstruments.AgilentE36312A","page":"Supported Instruments","title":"TcpInstruments.AgilentE36312A","text":"Available functions\n\nenable_output()\ndisable_output()\nset_voltage(voltage)\nget_voltage()\nset_current_limit(current)\nget_current_limit()\nset_channel(channel)\nget_channel()\n\n\n\n\n\n","category":"type"},{"location":"instruments/#TcpInstruments.SRSPS310","page":"Supported Instruments","title":"TcpInstruments.SRSPS310","text":"GPIB Enabled Device. Requires an attached Prologix Controller to work.\n\nAvailable functions\n\nenable_output()\ndisable_output()\nset_voltage(volts)\nget_voltage()\nset_voltage_limit(volts)\nget_voltage_limit()\nset_current_limit(current)\nget_current_limit()\nset_prologix_chan(chan)\nget_prologix_chan(chan)\n\n\n\n\n\n","category":"type"},{"location":"instruments/#TcpInstruments.VersatilePower","page":"Supported Instruments","title":"TcpInstruments.VersatilePower","text":"This device only has one channel so channel specific functions and optional arguments are not available.\n\nAvailable functions\n\nenable_output(obj::Instr{VersatilePower})\ndisable_output(obj::Instr{VersatilePower})\nset_voltage(obj::Instr{VersatilePower})\nget_voltage(obj::Instr{VersatilePower})\nset_current_limit(obj::Instr{VersatilePower}, current)\nget_current_limit(obj::Instr{VersatilePower})\n\nHelpers\n\nremote_mode(): sets the device to remote mode. Automatically called on initialize\nlocal_mode(): sets the device to local mode. Automatically called on terminate\n\nThis instrument has a remote and local mode. Some commands do not work while the device is in local mode, thus when initializing this device remote_mode is called automatically and the device is always in remote mode by default.\n\nThese functions should not be directly needed but if for some reason you need to switch modes while using the device you can use local_mode to turn the device back to local mode.\n\n\n\n\n\n","category":"type"},{"location":"instruments/#WaveformGenerator","page":"Supported Instruments","title":"WaveformGenerator","text":"","category":"section"},{"location":"general/","page":"General","title":"General","text":"CurrentModule = TcpInstruments","category":"page"},{"location":"general/#General-Usage","page":"General","title":"General Usage","text":"","category":"section"},{"location":"general/","page":"General","title":"General","text":"To connect to an instrument you must know its model and IP address:","category":"page"},{"location":"general/","page":"General","title":"General","text":"using TcpInstruments\ninstrument_handle = initialize(AgilentDSOX4034A, \"10.1.30.32\")\ninfo(instrument_handle)\ndata = get_data(instrument_handle)\nsave(data)","category":"page"},{"location":"general/","page":"General","title":"General","text":"When you are done you can close your connection:","category":"page"},{"location":"general/","page":"General","title":"General","text":"terminate(instrument_handle)","category":"page"},{"location":"general/","page":"General","title":"General","text":"If you do not know the ip address of any devices on your network:","category":"page"},{"location":"general/","page":"General","title":"General","text":"scan_network()","category":"page"},{"location":"general/","page":"General","title":"General","text":"By default scan_network will check the addresses between 10.1.30.1 to 10.1.30.255 but you may need to scan a different range, say: 10.1.150.1-255","category":"page"},{"location":"general/","page":"General","title":"General","text":"scan_network(; ip_network=\"10.1.150.\")","category":"page"},{"location":"general/#General-functions","page":"General","title":"General functions","text":"","category":"section"},{"location":"general/","page":"General","title":"General","text":"initialize\nterminate\ninfo\nscan_network\nsave\nload","category":"page"},{"location":"general/#InstrumentConfig.initialize","page":"General","title":"InstrumentConfig.initialize","text":"initialize(model, address)\n\nInitializes a connection to the instrument at the given (input) IP address.\n\nArguments\n\nmodel: They device type you are connecting to. Use help> -->Instrument to see available options.\naddress::String: The ip address of the device. Ex. \"10.3.30.23\"\n\nKeywords\n\nGPIB_ID::Int: The GPIB interface ID of your device. This is optional and doesn't need to be set unless you are using a prologix controller to control it remotely. \n\n\n\n\n\n","category":"function"},{"location":"general/#InstrumentConfig.terminate","page":"General","title":"InstrumentConfig.terminate","text":"terminate(instr)\n\nCloses the TCP connection.\n\n\n\n\n\n","category":"function"},{"location":"general/#TcpInstruments.info","page":"General","title":"TcpInstruments.info","text":"info(instr_h)\n\nAsks an instrument to print model number and other device info.\n\n\n\n\n\n","category":"function"},{"location":"general/#TcpInstruments.scan_network","page":"General","title":"TcpInstruments.scan_network","text":"scan_network(; network_id=\"10.1.30.0\", host_range=1:255, v=false)\n\nWill scan your network and report all found devices.\n\nBy default it only searches for devices connected on port: 5025\n\nIf you would like to search for devices on a different port set the v flag to true.\n\n\n\n\n\n","category":"function"},{"location":"general/#TcpInstruments.save","page":"General","title":"TcpInstruments.save","text":"save(data)\nsave(data; format=:matlab)\nsave(data; filename=\"custom_file_name.ext\")\n\nSave data to a file\n\nBy default saves to julia format (.jld2) but can also export data to matlab by using the format=:matlab keyword argument\n\n\n\n\n\n","category":"function"},{"location":"general/#TcpInstruments.load","page":"General","title":"TcpInstruments.load","text":"data = load(\"file.jld2\")\n\nLoads saved data from a file\n\n\n\n\n\n","category":"function"},{"location":"general/#Power-Supply","page":"General","title":"Power Supply","text":"","category":"section"},{"location":"general/#AgilentE36312A","page":"General","title":"AgilentE36312A","text":"","category":"section"},{"location":"general/","page":"General","title":"General","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/power_supply/AgilentE36312A.jl\"]","category":"page"},{"location":"general/#TcpInstruments.disable_output-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"General","title":"TcpInstruments.disable_output","text":"This will disable an output on a device.\n\nIf the device has multiple channels it will disable the device for the currently selected channel. To see the channel that will effected use the get_channel function.\n\nIf you want to disable a different channel, first use set_channel to choose the channel. Running this function subsequently will disable that channel\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.enable_output-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"General","title":"TcpInstruments.enable_output","text":"This will enable an output on a device.\n\nIf the device has multiple channels it will enable the device for the currently selected channel. To see the channel that will effected use the get_channel function.\n\nIf you want to enable a different channel, first use set_channel to choose the channel. Running this function subsequently will enable that channel\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_channel-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"General","title":"TcpInstruments.get_channel","text":"This will return the global or default channel of a device.\n\nAllows you to see what the global channel is set to at the moment\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\nv\noptional boolean flag argument that is set to false\nsetting to true will print the verbose channel name\n\nSupported Instruments:\n\nPower supply\n\nReturns:   String     - {\"1\"|\"2\"|...}     - when v == true: \"P6V\", .. etc\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_current_limit-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"General","title":"TcpInstruments.get_current_limit","text":"This will return the current limit of a device.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Current Limit\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_output-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"General","title":"TcpInstruments.get_output","text":"This will return the state of an output on a device.\n\nIf the device has multiple channels is will display the state of the currently selected channel. To see the channel that will read use the get_channel function.\n\nIf you want to see the state of a different channel, first use set_channel to choose the channel. Running this function subsequently will disable that channel\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\nReturns:   String: {\"0\"|\"1\"}\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"General","title":"TcpInstruments.get_voltage","text":"This will return the voltage of a device's channel.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Voltage\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_channel-Tuple{TcpInstruments.Instr{AgilentE36312A}, Any}","page":"General","title":"TcpInstruments.set_channel","text":"This will set the global channel on a device.\n\nAny commands like set_voltage that affect the device with respect to a specific channel will be impacted by this command.\n\nBy setting the channel on a device, all subsequent commands will operate on that channel unless they allow for an optional channel argument.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_current_limit-Tuple{TcpInstruments.Instr{AgilentE36312A}, Union{Unitful.Quantity{T, 𝐈, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐈, U}} where {L, S}} where {T, U}}","page":"General","title":"TcpInstruments.set_current_limit","text":"This will change the current limit of a device on a given  channel\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nnum\nDesired current limit of type Unitful Amps: 1.0u\"A\"\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_voltage-Tuple{TcpInstruments.Instr{AgilentE36312A}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"General","title":"TcpInstruments.set_voltage","text":"This will change the voltage output voltage of a device.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nnum\ninteger or decimal of the desired voltage\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"general/#SRSPS310","page":"General","title":"SRSPS310","text":"","category":"section"},{"location":"general/","page":"General","title":"General","text":"This device needs a gpib adapter","category":"page"},{"location":"general/","page":"General","title":"General","text":"As of right now the prologix adapter interface is the only supported adapter.","category":"page"},{"location":"general/","page":"General","title":"General","text":"Connect your power supply to a prologix adapter then initialize using the GPIB_ID keyword argument.","category":"page"},{"location":"general/","page":"General","title":"General","text":"If you do not know the GPIB Channel ID you can initialize your device without that flag. Then run scan_prologix on your device. This will tell you what channel is connected then manually you can use the set_prologix function to set the channel.","category":"page"},{"location":"general/","page":"General","title":"General","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/power_supply/SRSPS310.jl\"]","category":"page"},{"location":"general/#TcpInstruments.disable_output-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"General","title":"TcpInstruments.disable_output","text":"This will disable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.enable_output-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"General","title":"TcpInstruments.enable_output","text":"This will enable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_current_limit-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"General","title":"TcpInstruments.get_current_limit","text":"This will return the current limit of a device.\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Current Limit\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_output-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"General","title":"TcpInstruments.get_output","text":"This will disable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\nReturns\n\ntrue if High Voltage Output is Off\nfalse if High Voltage Output is On\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"General","title":"TcpInstruments.get_voltage","text":"This will return the voltage of a device\n\nVoltage Limit: 1250V\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Voltage\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_voltage_limit-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"General","title":"TcpInstruments.get_voltage_limit","text":"This will return the voltage limit of a device\n\nVoltage Limit: 1250V\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Voltage\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_current_limit-Tuple{TcpInstruments.Instr{SRSPS310}, Union{Unitful.Quantity{T, 𝐈, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐈, U}} where {L, S}} where {T, U}}","page":"General","title":"TcpInstruments.set_current_limit","text":"This will change the current limit of a device \n\nMIN Value: 0 Max Value: { 2.1e-3 | 0.021 } (21mA)\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_voltage-Tuple{TcpInstruments.Instr{SRSPS310}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"General","title":"TcpInstruments.set_voltage","text":"This will change the voltage output of a device.\n\nVoltage Limit: The value of getvoltagelimit()\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_voltage_limit-Tuple{TcpInstruments.Instr{SRSPS310}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"General","title":"TcpInstruments.set_voltage_limit","text":"set_voltage_limit(::SRSPS310, voltage_limit)\n\nThis will change the voltage limit of a device.\n\nMax Voltage Limit: 1250V\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"general/#VersatilePower","page":"General","title":"VersatilePower","text":"","category":"section"},{"location":"general/","page":"General","title":"General","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/power_supply/VersatilePower.jl\"]","category":"page"},{"location":"general/#TcpInstruments.disable_output-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"General","title":"TcpInstruments.disable_output","text":"This will disable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.enable_output-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"General","title":"TcpInstruments.enable_output","text":"This will enable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_current_limit-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"General","title":"TcpInstruments.get_current_limit","text":"This will return the current limit of a device.\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Current Limit\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_output-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"General","title":"TcpInstruments.get_output","text":"This will return the state of an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\nReturns:   String: {\"OFF\"|\"ON\"}\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"General","title":"TcpInstruments.get_voltage","text":"This will return the voltage of a device\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Voltage\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_current_limit-Tuple{TcpInstruments.Instr{VersatilePower}, Union{Unitful.Quantity{T, 𝐈, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐈, U}} where {L, S}} where {T, U}}","page":"General","title":"TcpInstruments.set_current_limit","text":"This will change the current limit of a device \n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_voltage-Tuple{TcpInstruments.Instr{VersatilePower}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"General","title":"TcpInstruments.set_voltage","text":"This will change the voltage output of a device.\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"general/#Signal-Generator","page":"General","title":"Signal Generator","text":"","category":"section"},{"location":"general/#Keysight33612A","page":"General","title":"Keysight33612A","text":"","category":"section"},{"location":"general/","page":"General","title":"General","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/signal_generator/Keysight33612A.jl\"]","category":"page"},{"location":"general/#TcpInstruments.get_burst_mode-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"General","title":"TcpInstruments.get_burst_mode","text":"get_burst_mode(instr)\nget_burst_mode(instr; chan=1)\n\nReturns the burst mode of a device:     \"TRIG\" ~ If the device is in Triggered Mode     \"GAT\" ~ If the device is in Gated Mode\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_burst_num_cycles-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"General","title":"TcpInstruments.get_burst_num_cycles","text":"get_burst_num_of_cycles(instr)\nget_burst_num_of_cycles(instr; chan=2)\n\nKeywords\n\nchan: Specify channel: Default is 1\n\nReturns\n\nFloat64: number of cycles burst mode is set to\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_burst_period-Tuple{Any}","page":"General","title":"TcpInstruments.get_burst_period","text":"get_burst_period(instr)\nget_burst_period(instr; chan=2)\n\nKeywords\n\nchan: Specify channel: Default is 1\n\nReturns\n\nFloat64: number of cycles burst mode is set to\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_function-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"General","title":"TcpInstruments.get_function","text":"get_function(instr)\nget_function(instr; chan=2)\n\nKeywords\n\nchan: Specify channel: Default is 1\n\nReturns\n\nString: Will return one of these shortened forms:\n\n{SINusoid|SQUare|TRIangle|RAMP|PULSe|PRBS|NOISe|ARB|DC}\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_mode-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"General","title":"TcpInstruments.get_mode","text":"get_mode(instr)\nget_mode(instr; chan=2)\n\nKeywords\n\nchan: Specify channel: Default is 1\n\nReturns:     \"CW\" ~ if device is in continous wavefrom mode     \"BURST\" ~ if device is in BURST mode\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_burst_mode_gated-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"General","title":"TcpInstruments.set_burst_mode_gated","text":"Sets the burst mode of a device to Gated Mode\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_burst_mode_trigger-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"General","title":"TcpInstruments.set_burst_mode_trigger","text":"Sets the burst mode of a device to Triggered Mode\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_burst_num_cycles-Tuple{TcpInstruments.Instr{Keysight33612A}, Any}","page":"General","title":"TcpInstruments.set_burst_num_cycles","text":"set_burst_num_of_cycles(instr, cycles)\nset_burst_num_of_cycles(instr, cycles; chan=2)\n\nSets the number of cycles for burst mode\n\nArguments\n\ncycles\n\nKeywords\n\nchan: Specify channel: Default is 1\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_burst_period-Tuple{Any, Any}","page":"General","title":"TcpInstruments.set_burst_period","text":"set_burst_period(obj, num; chan=1)\n\nArguments\n\nnum: The number of seconds (This value can also be \"MIN\" or \"MAX\")\n\nKeywords\n\nchan: Specify channel: Default is 1\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_function-Tuple{TcpInstruments.Instr{Keysight33612A}, Any}","page":"General","title":"TcpInstruments.set_function","text":"set_function(instr, func; chan=1)\n\nArguments\n\nfunc::String: Acceptable inputs:\n\n{SINusoid|SQUare|TRIangle|RAMP|PULSe|PRBS|NOISe|ARB|DC}\n\nKeywords\n\nchan: Specify channel: Default is 1\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_mode_burst-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"General","title":"TcpInstruments.set_mode_burst","text":"    set_mode_burst(instr)\n\nChanges Waveform Generator mode from continous waveform to burst\n\nBy default it sets the type of burst mode to triggered mode. Gated mode can also be set by using the optional flag:\n\n    set_mode_burst(instr; mode=:gated)\n\nThe optional trig_src flag sets the trigger source for burst triggered mode. Right now the default is Timer. To implement more trigger sources see page 130 of the manual for 33612A\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_mode_cw-Tuple{TcpInstruments.Instr{Keysight33612A}}","page":"General","title":"TcpInstruments.set_mode_cw","text":"setmodecw(instr) setmodecw(instr; chan=2)\n\nPuts the device in continuous waveform/turns off burst mode\n\nKeywords\n\nchan: Specify channel: Default is 1\n\n\n\n\n\n","category":"method"},{"location":"general/#Impedance-Analyzer","page":"General","title":"Impedance Analyzer","text":"","category":"section"},{"location":"general/#Agilent4294A","page":"General","title":"Agilent4294A","text":"","category":"section"},{"location":"general/","page":"General","title":"General","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/impedance_analyzer/Agilent4294A.jl\"]","category":"page"},{"location":"general/#TcpInstruments.get_bandwidth-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"General","title":"TcpInstruments.get_bandwidth","text":"get_bandwidth(instr)\n\nReturns bandwidth level (1-5)\n\nReturns\n\nInt: Between 1 and 5\n\n(Initial value) Specifies bandwidth 1 (shortest measurement time)\nSpecifies bandwidth 2\nSpecifies bandwidth 3\nSpecifies bandwidth 4\nSpecifies bandwidth 5 (longest measurement time, accurate\n\nmeasurement).\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_volt_ac-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"General","title":"TcpInstruments.get_volt_ac","text":"get_volt_ac(instr)\n\nReturns oscillator (ac) voltage\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_bandwidth-Tuple{TcpInstruments.Instr{Agilent4294A}, Any}","page":"General","title":"TcpInstruments.set_bandwidth","text":"set_bandwith(instr, n)\n\nSets bandwidth level (1-5)\n\nArguments\n\nn::Int: Desired bandwidth level (between 1 and 5)\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_volt_ac-Tuple{TcpInstruments.Instr{Agilent4294A}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"General","title":"TcpInstruments.set_volt_ac","text":"set_volt_ac(instr, voltage)\n\nArguments\n\nvoltage: Desired voltage, range for voltage setting: 5E-3 to 1\n\n\n\n\n\n","category":"method"},{"location":"general/#Agilent4395A","page":"General","title":"Agilent4395A","text":"","category":"section"},{"location":"general/#WIP","page":"General","title":"WIP","text":"","category":"section"},{"location":"general/","page":"General","title":"General","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/impedance_analyzer/Agilent4395A.jl\"]","category":"page"},{"location":"general/#TcpInstruments.get_bandwith-Tuple{TcpInstruments.Instr{Agilent4395A}}","page":"General","title":"TcpInstruments.get_bandwith","text":"Returns device bandwidth\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_channel-Tuple{TcpInstruments.Instr{Agilent4395A}}","page":"General","title":"TcpInstruments.get_channel","text":"Returns 1 or 2 depending on current channel\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_impedance-Tuple{TcpInstruments.Instr{Agilent4395A}}","page":"General","title":"TcpInstruments.get_impedance","text":"P. 3-10\n\nError corrected data The results of error correction are stored in the data arrays as complex number pairs. Formatted data\n\nThis is the array of data being displayed. It reflects all post-processing functions such as electrical delay, and the units of the array read out depends on the current display format.\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_bandwith-Tuple{TcpInstruments.Instr{Agilent4395A}, Any}","page":"General","title":"TcpInstruments.set_bandwith","text":"Pg.  B-3\n\n2, 10, 30, 100, 300, 1000 (=1k), 3000 (=3k), 10000 (=10k), 30000 (=30k) (Network and impedance analyzers)\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_channel-Tuple{TcpInstruments.Instr{Agilent4395A}, Any}","page":"General","title":"TcpInstruments.set_channel","text":"set_channel(i, channel_number)\n\nUses.\n\nset_channel(i, 1)\n\nset_channel(i, 2)\n\n\n\n\n\n","category":"method"},{"location":"general/#Oscilloscope","page":"General","title":"Oscilloscope","text":"","category":"section"},{"location":"general/#AgilentDSOX4024A","page":"General","title":"AgilentDSOX4024A","text":"","category":"section"},{"location":"general/","page":"General","title":"General","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/oscilloscope/AgilentDSOX4024A.jl\"]","category":"page"},{"location":"general/#AgilentDSOX4034A","page":"General","title":"AgilentDSOX4034A","text":"","category":"section"},{"location":"general/","page":"General","title":"General","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/oscilloscope/AgilentDSOX4034A.jl\"]","category":"page"},{"location":"general/","page":"General","title":"General","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/oscilloscope/scope_common.jl\"]","category":"page"},{"location":"general/#TcpInstruments.get_coupling-Tuple{Instrument}","page":"General","title":"TcpInstruments.get_coupling","text":"get_coupling(scope, chan=1)\n\nreturns \"AC\" or \"DC\"\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_impedance-Tuple{Instrument}","page":"General","title":"TcpInstruments.get_impedance","text":"get_impedance(scope)\nset_impedance(scope, chan=2)\n\nKeywords\n\nchan: Specify channel: Default is 1\n\nReturns\n\n\"FIFT\": 50Ω\n\"ONEM\": 1MΩ\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_lpf_state-Tuple{Instrument}","page":"General","title":"TcpInstruments.get_lpf_state","text":"get_lpf_state(scope, chan=1)\n\nSee state the internal low-pass filter:\n\nreturns \"0\" or \"1\"\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.lpf_off","page":"General","title":"TcpInstruments.lpf_off","text":"lpf_off(scope, chan=1)\n\nTurn off an internal low-pass filter.\n\n\n\n\n\n","category":"function"},{"location":"general/#TcpInstruments.lpf_on","page":"General","title":"TcpInstruments.lpf_on","text":"lpf_on(scope, chan=1)\n\nTurn on an internal low-pass filter. When the filter is on, the bandwidth of the specified channel is limited to approximately 25 MHz.\n\n\n\n\n\n","category":"function"},{"location":"general/#TcpInstruments.run-Union{Tuple{TcpInstruments.Instr{T}}, Tuple{T}} where T<:Oscilloscope","page":"General","title":"TcpInstruments.run","text":"run(scope)\n\nRun Oscilloscope\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_impedance_1Mohm-Tuple{Instrument}","page":"General","title":"TcpInstruments.set_impedance_1Mohm","text":"set_impedance_1Mohm(scope, chan=1)\n\nSet impedance to 1MΩ\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_impedance_50ohm-Tuple{Instrument}","page":"General","title":"TcpInstruments.set_impedance_50ohm","text":"set_impedance_50ohm(scope)\nset_impedance_50ohm(scope, chan=2)\n\nKeywords\n\nchan: Specify channel: Default is 1\n\nSet impedance to 50Ω\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.stop-Union{Tuple{TcpInstruments.Instr{T}}, Tuple{T}} where T<:Oscilloscope","page":"General","title":"TcpInstruments.stop","text":"stop(scope)\n\nStop Oscilloscope\n\n\n\n\n\n","category":"method"},{"location":"general/#Multimeter","page":"General","title":"Multimeter","text":"","category":"section"},{"location":"general/#KeysightDMM34465A","page":"General","title":"KeysightDMM34465A","text":"","category":"section"},{"location":"general/","page":"General","title":"General","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/multimeter/KeysightDMM34465A.jl\"]","category":"page"},{"location":"general/#TcpInstruments.get_channel-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"General","title":"TcpInstruments.get_channel","text":"Indicates which input terminals are selected on the front panel Front/Rear switch. This switch is not programmable; this query reports the position of the switch, but cannot change it.\n\nDo not toggle the Front/Rear switch with active signals on the terminals. This switch is not intended to be used in this way and may be damaged by high voltages or currents, possibly compromising the instrument's safety features.\n\nReturns\n\n\"FRON\" or \"REAR\"\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_current-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"General","title":"TcpInstruments.get_current","text":"Returns current\n\nKeywords\n\ntype: \"DC\" | \"AC\" (Default DC)\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_resistance-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"General","title":"TcpInstruments.get_resistance","text":"get_resistance(multimeter; wire=2)\nget_resistance(multimeter; wire=4)\n\nReturns resistance\n\nKeywords\n\nwire: 2 | 4 (Required)\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_tc_temperature-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"General","title":"TcpInstruments.get_tc_temperature","text":"get_tc_temperature(multimeter)\n\nPerform take a measurement with the probe mode set to thermocouple\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_temp_unit-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"General","title":"TcpInstruments.get_temp_unit","text":"get_temp_unit(multimeter)\n\nReturns C, F or K depending on the set temperature unit\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"General","title":"TcpInstruments.get_voltage","text":"Returns voltage\n\nKeywords\n\ntype: \"DC\" | \"AC\" (Default DC)\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_tc_type-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"General","title":"TcpInstruments.set_tc_type","text":"set_tc_type(multimeter; type=\"K\")\n\nKeywords\n\ntype: Can be E, J, K, N, R, T (Defaults to K)\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_temp_unit_celsius-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"General","title":"TcpInstruments.set_temp_unit_celsius","text":"set_temp_unit_celsius(multimeter)\n\nSets the temperature unit to celcius\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_temp_unit_farenheit-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"General","title":"TcpInstruments.set_temp_unit_farenheit","text":"set_temp_unit_farenheit(multimeter)\n\nSets the temperature unit to farenheit\n\n\n\n\n\n","category":"method"},{"location":"general/#TcpInstruments.set_temp_unit_kelvin-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"General","title":"TcpInstruments.set_temp_unit_kelvin","text":"set_temp_unit_kelvin(multimeter)\n\nSets the temperature unit to kelvin\n\n\n\n\n\n","category":"method"},{"location":"#TcpInstruments","page":"Home","title":"TcpInstruments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TcpInstruments allows you to control a variety of internet-enabled instruments","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TcpInstruments can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add TcpInstruments","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
