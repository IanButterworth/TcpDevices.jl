var documenterSearchIndex = {"docs":
[{"location":"functions/","page":"Functions","title":"Functions","text":"CurrentModule = TcpInstruments","category":"page"},{"location":"functions/#General-functions","page":"Functions","title":"General functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"CurrentModule = TcpInstruments","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"initialize\nterminate\ninfo\nscan_network\nsave\nload","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"initialize\nterminate\ninfo\nscan_network\nsave\nload","category":"page"},{"location":"functions/#InstrumentConfig.initialize","page":"Functions","title":"InstrumentConfig.initialize","text":"initialize(model::Type{Instrument})\ninitialize(model::Type{Instrument}, address::String; GPIB_ID::Int=-1)\n\nInitializes a connection to the instrument at the given (input) IP address.\n\nArguments\n\nmodel: The device type you are connecting to. Use help> Instrument to see available options\naddress (optional): The ip address of the device. Ex. \"10.3.30.23\". If not provided, TcpInstruments will look for the address in the config file\n\nKeywords\n\nGPIB_ID: The GPIB interface ID of your device. This is optional and doesn't need to be set unless you are using a prologix controller to control it remotely\n\n\n\n\n\n","category":"function"},{"location":"functions/#InstrumentConfig.terminate","page":"Functions","title":"InstrumentConfig.terminate","text":"terminate(instr::Instrument)\n\nCloses the TCP connection.\n\n\n\n\n\n","category":"function"},{"location":"functions/#TcpInstruments.info","page":"Functions","title":"TcpInstruments.info","text":"info(instr::Instrument)\n\nAsks an instrument to print model number and other device info.\n\n\n\n\n\n","category":"function"},{"location":"functions/#TcpInstruments.scan_network","page":"Functions","title":"TcpInstruments.scan_network","text":"scan_network(; network_id=\"10.1.30.0\", host_range=1:255)\n\nBy default, report all found devices between addresses 10.1.30.1 to 10.1.30.255.\n\nSearches for devices connected on port:\n\n5025 (scpi)\n1234 (prologix)\n\n\n\n\n\n","category":"function"},{"location":"functions/#TcpInstruments.save","page":"Functions","title":"TcpInstruments.save","text":"save(data)\nsave(data; format=:matlab)\nsave(data; filename=\"custom_file_name.ext\")\n\nSave data to a file\n\nBy default saves to julia format (.jld2) but can also export data to matlab by using the format=:matlab keyword argument\n\n\n\n\n\n","category":"function"},{"location":"functions/#TcpInstruments.load","page":"Functions","title":"TcpInstruments.load","text":"data = load(\"file.jld2\")\n\nLoads saved data from a file\n\n\n\n\n\n","category":"function"},{"location":"functions/#Impedance-Analyzer","page":"Functions","title":"Impedance Analyzer","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [TcpInstruments]\nPages = [\"src/impedance_analyzer/all.jl\"]","category":"page"},{"location":"functions/#TcpInstruments.get_frequency-Tuple{TcpInstruments.Instr{<:ImpedanceAnalyzer}}","page":"Functions","title":"TcpInstruments.get_frequency","text":"get_frequency(ia::Instr{<:ImpedanceAnalyzer})\n\nGet an array of frequency values with the same number of points as the data trace Output is in [MHz]\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_frequency_limits-Union{Tuple{TcpInstruments.Instr{T}}, Tuple{T}} where T<:ImpedanceAnalyzer","page":"Functions","title":"TcpInstruments.get_frequency_limits","text":"get_frequency_limits(instr)\n\nReturns\n\nTuple{Frequency, Frequency}: (lowerlimit, upperlimit)\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_impedance_analyzer_info-Tuple{TcpInstruments.Instr{<:ImpedanceAnalyzer}}","page":"Functions","title":"TcpInstruments.get_impedance_analyzer_info","text":"get_impedance_analyzer_info(ia::Instr{<:ImpedanceAnalyzer})\n\nGet current acquisition parameters from the impedance analyzer\n\ndcvoltage [V] acvoltage [V] numaverages bandwidthlevel [1, 2, 3, 4, 5] pointdelaytime [s] sweepdelaytime [s] sweep_direction [\"UP\", \"DOWN\"]\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_num_averages-Tuple{TcpInstruments.Instr{<:ImpedanceAnalyzer}}","page":"Functions","title":"TcpInstruments.get_num_averages","text":"get_num_averages(ia::Instr{<:ImpedanceAnalyzer})\n\nGet the number of sweep averages being used\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_num_data_points-Union{Tuple{TcpInstruments.Instr{T}}, Tuple{T}} where T<:ImpedanceAnalyzer","page":"Functions","title":"TcpInstruments.get_num_data_points","text":"get_num_data_points(instr)\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_point_delay_time-Tuple{TcpInstruments.Instr{<:ImpedanceAnalyzer}}","page":"Functions","title":"TcpInstruments.get_point_delay_time","text":"get_point_delay_time(ia::Instr{<:ImpedanceAnalyzer})\n\nGet time delay value used between data point acquisitions Output is in [s]\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_sweep_delay_time-Tuple{TcpInstruments.Instr{<:ImpedanceAnalyzer}}","page":"Functions","title":"TcpInstruments.get_sweep_delay_time","text":"get_sweep_delay_time(ia::Instr{<:ImpedanceAnalyzer})\n\nGet time delay value used between sweep acquisitions Output is in [s]\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_sweep_direction-Tuple{TcpInstruments.Instr{<:ImpedanceAnalyzer}}","page":"Functions","title":"TcpInstruments.get_sweep_direction","text":"get_sweep_direction(ia::Instr{<:ImpedanceAnalyzer})\n\nGet acquisition sweep direction Output is [\"UP\", \"DOWN\"]\n\n\"UP\": sweeps along increasing values (left to right on screen) \"DOWN\": sweeps along decreasing values (right to left on screen)\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_volt_dc-Union{Tuple{TcpInstruments.Instr{T}}, Tuple{T}} where T<:ImpedanceAnalyzer","page":"Functions","title":"TcpInstruments.get_volt_dc","text":"get_volt_dc(instr)\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.is_average_mode_on-Tuple{TcpInstruments.Instr{<:ImpedanceAnalyzer}}","page":"Functions","title":"TcpInstruments.is_average_mode_on","text":"is_average_mode_on(ia::Instr{<:ImpedanceAnalyzer})\n\nGet status for whether average mode is on Output is [true, false]\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_frequency_limits-Union{Tuple{T}, Tuple{TcpInstruments.Instr{T}, Union{Unitful.Quantity{T, 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐓^-1, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐓^-1, U}} where {L, S}} where {T, U}}} where T<:ImpedanceAnalyzer","page":"Functions","title":"TcpInstruments.set_frequency_limits","text":"set_frequency_limits(instr, lower_limit, upper_limit)\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_num_data_points-Union{Tuple{T}, Tuple{TcpInstruments.Instr{T}, Any}} where T<:ImpedanceAnalyzer","page":"Functions","title":"TcpInstruments.set_num_data_points","text":"set_num_data_points(instr, num_points)\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_volt_dc-Union{Tuple{T}, Tuple{TcpInstruments.Instr{T}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}} where T<:ImpedanceAnalyzer","page":"Functions","title":"TcpInstruments.set_volt_dc","text":"set_volt_dc(instr, volts)\n\n\n\n\n\n","category":"method"},{"location":"functions/#Agilent4294A","page":"Functions","title":"Agilent4294A","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/impedance_analyzer/Agilent4294A.jl\"]","category":"page"},{"location":"functions/#TcpInstruments.get_bandwidth-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"Functions","title":"TcpInstruments.get_bandwidth","text":"get_bandwidth(instr)\n\nReturns bandwidth level (1-5)\n\nReturns\n\nInt: Between 1 and 5\n\n(Initial value) Specifies bandwidth 1 (shortest measurement time)\nSpecifies bandwidth 2\nSpecifies bandwidth 3\nSpecifies bandwidth 4\nSpecifies bandwidth 5 (longest measurement time, accurate\n\nmeasurement).\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_channel-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"Functions","title":"TcpInstruments.get_channel","text":"get_channel(i::Instr{Agilent4294A})\n\nReturns which channel is currently active, either 1 or 2.\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_impedance-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"Functions","title":"TcpInstruments.get_impedance","text":"get_impedance(Instr{Agilent4294A})\n\nGets the impedance from the impedance analyser. This function doesn't change any settings on the device, it only grabs data using the current settings.\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_volt_ac-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"Functions","title":"TcpInstruments.get_volt_ac","text":"get_volt_ac(instr)\n\nReturns oscillator (ac) voltage\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_bandwidth-Tuple{TcpInstruments.Instr{Agilent4294A}, Any}","page":"Functions","title":"TcpInstruments.set_bandwidth","text":"set_bandwith(instr, n)\n\nSets bandwidth level (1-5)\n\nArguments\n\nn::Int: Desired bandwidth level (between 1 and 5)\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_channel-Tuple{TcpInstruments.Instr{Agilent4294A}, Int64}","page":"Functions","title":"TcpInstruments.set_channel","text":"set_channel(i::Instr{Agilent4294A}, n::Int)\n\nSets which channel the impedance analyser is using. n must be 1 or 2.\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_measurement_to_complex-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"Functions","title":"TcpInstruments.set_measurement_to_complex","text":"set_measurement_to_complex(ia::Instr{Agilent4294A})\n\nSet Traces A & B to measure Z & Y, respectively Z: Impedance (complex number R + jX) Y: Admittance (complex number G + jB)\n\nR: Equivalent series resistance X: Equivalent series reactance G: Equivalent parallel conductance B: Equivalent parallel susceptance\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_measurement_to_impedance_and_phase-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"Functions","title":"TcpInstruments.set_measurement_to_impedance_and_phase","text":"set_measurement_to_impedance_and_phase(ia::Instr{Agilent4294A})\n\nSet Traces A & B to measure |Z| & θ, respectively |Z|: Impedance amplitude (absolute value)   θ: Impedance phase\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_volt_ac-Tuple{TcpInstruments.Instr{Agilent4294A}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"Functions","title":"TcpInstruments.set_volt_ac","text":"set_volt_ac(instr, voltage)\n\nArguments\n\nvoltage: Desired voltage, range for voltage setting: 5E-3 to 1\n\n\n\n\n\n","category":"method"},{"location":"functions/#Agilent4395A","page":"Functions","title":"Agilent4395A","text":"","category":"section"},{"location":"functions/#WIP","page":"Functions","title":"WIP","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/impedance_analyzer/Agilent4395A.jl\"]","category":"page"},{"location":"functions/#TcpInstruments.get_bandwith-Tuple{TcpInstruments.Instr{Agilent4395A}}","page":"Functions","title":"TcpInstruments.get_bandwith","text":"Returns device bandwidth\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_channel-Tuple{TcpInstruments.Instr{Agilent4395A}}","page":"Functions","title":"TcpInstruments.get_channel","text":"Returns 1 or 2 depending on current channel\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_impedance-Tuple{TcpInstruments.Instr{Agilent4395A}}","page":"Functions","title":"TcpInstruments.get_impedance","text":"P. 3-10\n\nError corrected data The results of error correction are stored in the data arrays as complex number pairs. Formatted data\n\nThis is the array of data being displayed. It reflects all post-processing functions such as electrical delay, and the units of the array read out depends on the current display format.\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_bandwith-Tuple{TcpInstruments.Instr{Agilent4395A}, Any}","page":"Functions","title":"TcpInstruments.set_bandwith","text":"Pg.  B-3\n\n2, 10, 30, 100, 300, 1000 (=1k), 3000 (=3k), 10000 (=10k), 30000 (=30k) (Network and impedance analyzers)\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_channel-Tuple{TcpInstruments.Instr{Agilent4395A}, Any}","page":"Functions","title":"TcpInstruments.set_channel","text":"set_channel(i, channel_number)\n\nUses.\n\nset_channel(i, 1)\n\nset_channel(i, 2)\n\n\n\n\n\n","category":"method"},{"location":"functions/#Multimeter","page":"Functions","title":"Multimeter","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [TcpInstruments]\nPages = [\"src/multimeter/all.jl\"]","category":"page"},{"location":"functions/#KeysightDMM34465A","page":"Functions","title":"KeysightDMM34465A","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/multimeter/KeysightDMM34465A.jl\"]","category":"page"},{"location":"functions/#TcpInstruments.get_channel-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"Functions","title":"TcpInstruments.get_channel","text":"get_channel(obj::Instr{KeysightDMM34465A})\n\nIndicates which input terminals are selected on the front panel Front/Rear switch. This switch is not programmable; this query reports the position of the switch, but cannot change it.\n\nDo not toggle the Front/Rear switch with active signals on the terminals. This switch is not intended to be used in this way and may be damaged by high voltages or currents, possibly compromising the instrument's safety features.\n\nReturns\n\n\"FRON\" or \"REAR\"\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_current-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"Functions","title":"TcpInstruments.get_current","text":"get_current(obj::Instr{KeysightDMM34465A}; type=\"DC\")\n\nReturns current\n\nKeywords\n\ntype: \"DC\" | \"AC\" (Default DC)\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_resistance-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"Functions","title":"TcpInstruments.get_resistance","text":"get_resistance(multimeter; wire=2)\nget_resistance(multimeter; wire=4)\n\nReturns resistance\n\nKeywords\n\nwire: 2 | 4 (Required)\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_tc_temperature-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"Functions","title":"TcpInstruments.get_tc_temperature","text":"get_tc_temperature(multimeter)\n\nPerform take a measurement with the probe mode set to thermocouple\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_temp_unit-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"Functions","title":"TcpInstruments.get_temp_unit","text":"get_temp_unit(multimeter)\n\nReturns C, F or K depending on the set temperature unit\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"Functions","title":"TcpInstruments.get_voltage","text":"Returns voltage\n\nKeywords\n\ntype: \"DC\" | \"AC\" (Default DC)\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_tc_type-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"Functions","title":"TcpInstruments.set_tc_type","text":"set_tc_type(multimeter; type=\"K\")\n\nKeywords\n\ntype: Can be E, J, K, N, R, T (Defaults to K)\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_temp_unit_celsius-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"Functions","title":"TcpInstruments.set_temp_unit_celsius","text":"set_temp_unit_celsius(multimeter)\n\nSets the temperature unit to celcius\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_temp_unit_farenheit-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"Functions","title":"TcpInstruments.set_temp_unit_farenheit","text":"set_temp_unit_farenheit(multimeter)\n\nSets the temperature unit to farenheit\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_temp_unit_kelvin-Tuple{TcpInstruments.Instr{KeysightDMM34465A}}","page":"Functions","title":"TcpInstruments.set_temp_unit_kelvin","text":"set_temp_unit_kelvin(multimeter)\n\nSets the temperature unit to kelvin\n\n\n\n\n\n","category":"method"},{"location":"functions/#Oscilloscope","page":"Functions","title":"Oscilloscope","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/oscilloscope/scope_common.jl\"]","category":"page"},{"location":"functions/#TcpInstruments.get_coupling-Tuple{TcpInstruments.Instr{<:Oscilloscope}}","page":"Functions","title":"TcpInstruments.get_coupling","text":"get_coupling(scope; chan=1)\n\nreturns \"AC\" or \"DC\"\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_data-Tuple{TcpInstruments.Instr{<:Oscilloscope}}","page":"Functions","title":"TcpInstruments.get_data","text":"get_data(scope, channel_vector; check_channels=true)\nget_data(scope, channel)\nget_data(scope)\n\nGrab data from the specified channel(s). If no channels are specified, data will be grabbed from all available channels\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_impedance-Tuple{TcpInstruments.Instr{<:Oscilloscope}}","page":"Functions","title":"TcpInstruments.get_impedance","text":"get_impedance(scope)\n\nKeywords\n\nchan: Specify channel: Default is 1\n\nReturns\n\n\"FIFT\": 50Ω\n\"ONEM\": 1MΩ\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_lpf_state-Tuple{TcpInstruments.Instr{<:Oscilloscope}}","page":"Functions","title":"TcpInstruments.get_lpf_state","text":"get_lpf_state(scope; chan=1)\n\nSee state the internal low-pass filter:\n\nreturns \"0\" or \"1\"\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_waveform_info-Tuple{TcpInstruments.Instr{<:Oscilloscope}, Integer}","page":"Functions","title":"TcpInstruments.get_waveform_info","text":"get_waveform_info(scope, channel)\n\nGrab channel information and return it in a ScopeInfo(@ref) struct\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.lpf_off-Tuple{TcpInstruments.Instr{<:Oscilloscope}}","page":"Functions","title":"TcpInstruments.lpf_off","text":"lpf_off(scope; chan=1)\n\nTurn off an internal low-pass filter.\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.lpf_on-Tuple{TcpInstruments.Instr{<:Oscilloscope}}","page":"Functions","title":"TcpInstruments.lpf_on","text":"lpf_on(scope; chan=1)\n\nTurn on an internal low-pass filter. When the filter is on, the bandwidth of the specified channel is limited to approximately 25 MHz.\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.run-Tuple{TcpInstruments.Instr{<:Oscilloscope}}","page":"Functions","title":"TcpInstruments.run","text":"run(scope)\n\nRun Oscilloscope\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_impedance_1Mohm-Tuple{TcpInstruments.Instr{<:Oscilloscope}}","page":"Functions","title":"TcpInstruments.set_impedance_1Mohm","text":"set_impedance_1Mohm(scope; chan=1)\n\nSet impedance to 1MΩ\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_impedance_50ohm-Tuple{TcpInstruments.Instr{<:Oscilloscope}}","page":"Functions","title":"TcpInstruments.set_impedance_50ohm","text":"set_impedance_50ohm(scope; chan=1)\n\nKeywords\n\nchan: Specify channel: Default is 1\n\nSet impedance to 50Ω\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_waveform_points_mode-Tuple{TcpInstruments.Instr{<:Oscilloscope}, Symbol}","page":"Functions","title":"TcpInstruments.set_waveform_points_mode","text":"set_waveform_points_mode(scope, mode)\n\nSet which data to transfer when using get_data(@ref)\n\nInputs: scope: handle to the connected oscilloscope mode: \n\n:NORMAL: transfer the measurement data\n:RAW: transfer the raw acquisition data\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.stop-Tuple{TcpInstruments.Instr{<:Oscilloscope}}","page":"Functions","title":"TcpInstruments.stop","text":"stop(scope)\n\nStop Oscilloscope\n\n\n\n\n\n","category":"method"},{"location":"functions/#AgilentDSOX4024A","page":"Functions","title":"AgilentDSOX4024A","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/oscilloscope/AgilentDSOX4024A.jl\"]","category":"page"},{"location":"functions/#AgilentDSOX4034A","page":"Functions","title":"AgilentDSOX4034A","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/oscilloscope/AgilentDSOX4034A.jl\"]","category":"page"},{"location":"functions/#Power-Supply","page":"Functions","title":"Power Supply","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [TcpInstruments]\nPages = [\"src/power_supply/all.jl\"]","category":"page"},{"location":"functions/#TcpInstruments.get_channel-Tuple{Instrument}","page":"Functions","title":"TcpInstruments.get_channel","text":"get_channel(obj::Instrument; v=false)\n\nThis will return the global or default channel of a device.\n\nAllows you to see what the global channel is set to at the moment\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\nv\noptional boolean flag argument that is set to false\nsetting to true will print the verbose channel name\n\nSupported Instruments:\n\nPower supply\n\nReturns:   String     - {\"1\"|\"2\"|...}     - when v == true: \"P6V\", .. etc\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_channel-Tuple{Instrument}","page":"Functions","title":"TcpInstruments.set_channel","text":"set_channel(obj::Instrument; v=false)\n\nThis will set the global channel on a device.\n\nAny commands like set_voltage that affect the device with respect to a specific channel will be impacted by this command.\n\nBy setting the channel on a device, all subsequent commands will operate on that channel unless they allow for an optional channel argument.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"functions/#AgilentE36312A","page":"Functions","title":"AgilentE36312A","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/power_supply/AgilentE36312A.jl\"]","category":"page"},{"location":"functions/#TcpInstruments.disable_output-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"Functions","title":"TcpInstruments.disable_output","text":"disable_output(obj::Instr{AgilentE36312A})\n\nThis will disable an output on a device.\n\nIf the device has multiple channels it will disable the device for the currently selected channel. To see the channel that will effected use the get_channel function.\n\nIf you want to disable a different channel, first use set_channel to choose the channel. Running this function subsequently will disable that channel\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.enable_output-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"Functions","title":"TcpInstruments.enable_output","text":"enable_output(obj::Instr{AgilentE36312A})\n\nThis will enable an output on a device.\n\nIf the device has multiple channels it will enable the device for the currently selected channel. To see the channel that will effected use the get_channel function.\n\nIf you want to enable a different channel, first use set_channel to choose the channel. Running this function subsequently will enable that channel\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_channel-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"Functions","title":"TcpInstruments.get_channel","text":"get_channel(obj::Instr{AgilentE36312A}; v=false)\n\nThis will return the global or default channel of a device.\n\nAllows you to see what the global channel is set to at the moment\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\nv\noptional boolean flag argument that is set to false\nsetting to true will print the verbose channel name\n\nSupported Instruments:\n\nPower supply\n\nReturns:   String     - {\"1\"|\"2\"|...}     - when v == true: \"P6V\", .. etc\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_current_limit-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"Functions","title":"TcpInstruments.get_current_limit","text":"get_current_limit(obj::Instr{AgilentE36312A}; chan=0)\n\nThis will return the current limit of a device.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Current Limit\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_output-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"Functions","title":"TcpInstruments.get_output","text":"get_output(obj::Instr{AgilentE36312A})\n\nThis will return the state of an output on a device.\n\nIf the device has multiple channels is will display the state of the currently selected channel. To see the channel that will read use the get_channel function.\n\nIf you want to see the state of a different channel, first use set_channel to choose the channel. Running this function subsequently will disable that channel\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\nReturns:   String: {\"0\"|\"1\"}\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{AgilentE36312A}}","page":"Functions","title":"TcpInstruments.get_voltage","text":"get_voltage(obj::Instr{AgilentE36312A}; chan=0)\n\nThis will return the voltage of a device's channel.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Voltage\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_channel-Tuple{TcpInstruments.Instr{AgilentE36312A}, Any}","page":"Functions","title":"TcpInstruments.set_channel","text":"set_channel(obj::Instr{AgilentE36312A}, chan)\n\nThis will set the global channel on a device.\n\nAny commands like set_voltage that affect the device with respect to a specific channel will be impacted by this command.\n\nBy setting the channel on a device, all subsequent commands will operate on that channel unless they allow for an optional channel argument.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_current_limit-Tuple{TcpInstruments.Instr{AgilentE36312A}, Union{Unitful.Quantity{T, 𝐈, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐈, U}} where {L, S}} where {T, U}}","page":"Functions","title":"TcpInstruments.set_current_limit","text":"set_current_limit(obj::Instr{AgilentE36312A}, num::Current; chan=0)\n\nThis will change the current limit of a device on a given channel\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nnum\nDesired current limit of type Unitful Amps: 1.0u\"A\"\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_voltage-Tuple{TcpInstruments.Instr{AgilentE36312A}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"Functions","title":"TcpInstruments.set_voltage","text":"set_voltage(obj::Instr{AgilentE36312A}, num::Voltage; chan=0)\n\nThis will change the voltage output voltage of a device.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nnum\ninteger or decimal of the desired voltage\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"functions/#SRSPS310","page":"Functions","title":"SRSPS310","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"This device needs a gpib adapter","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"As of right now the prologix adapter interface is the only supported adapter.","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"Connect your power supply to a prologix adapter then initialize using the GPIB_ID keyword argument.","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"If you do not know the GPIB Channel ID you can initialize your device without that flag. Then run scan_prologix on your device. This will tell you what channel is connected then manually you can use the set_prologix function to set the channel.","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/power_supply/SRSPS310.jl\"]","category":"page"},{"location":"functions/#TcpInstruments.disable_output-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"Functions","title":"TcpInstruments.disable_output","text":"disable_output(obj::Instr{SRSPS310})\n\nThis will disable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.enable_output-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"Functions","title":"TcpInstruments.enable_output","text":"enable_output(obj::Instr{SRSPS310})\n\nThis will enable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_current_limit-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"Functions","title":"TcpInstruments.get_current_limit","text":"get_current_limit(obj::Instr{SRSPS310})\n\nThis will return the current limit of a device.\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Current Limit\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_output-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"Functions","title":"TcpInstruments.get_output","text":"get_output(obj::Instr{SRSPS310})\n\nThis will get and return whether the output from SRSPS310 is enabled.\n\nArguments:     - obj     - must be a Power Supply Instrument Supported Instruments:     - Power supply\n\nReturns\n\ntrue if High Voltage Output is Off (<- check if this should state On)\nfalse if High Voltage Output is On (<- check if this should state Off)\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"Functions","title":"TcpInstruments.get_voltage","text":"get_voltage(obj::Instr{SRSPS310})\n\nThis will return the voltage of a device\n\nVoltage Limit: 1250V\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Voltage\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_voltage_limit-Tuple{TcpInstruments.Instr{SRSPS310}}","page":"Functions","title":"TcpInstruments.get_voltage_limit","text":"get_voltage_limit(obj::Instr{SRSPS310})\n\nThis will return the voltage limit of a device\n\nVoltage Limit: 1250V\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Voltage\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_current_limit-Tuple{TcpInstruments.Instr{SRSPS310}, Union{Unitful.Quantity{T, 𝐈, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐈, U}} where {L, S}} where {T, U}}","page":"Functions","title":"TcpInstruments.set_current_limit","text":"set_current_limit(obj::Instr{SRSPS310}, num::Current)\n\nThis will change the current limit of a device\n\nMIN Value: 0 Max Value: { 2.1e-3 | 0.021 } (21mA)\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_voltage-Tuple{TcpInstruments.Instr{SRSPS310}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"Functions","title":"TcpInstruments.set_voltage","text":"set_voltage(obj::Instr{SRSPS310}, volt::Voltage; [delta_volt::Voltage, delta_time::Time, verbose::Bool])\n\nSets the output voltage output of a SRSPS310 power supply. optional parameters: deltavolt and deltatime can be used to set the ramping speed when setting a new voltage.\n\ndelta_volt sets the maximum of each voltage step.  (std value: Inf *u\"V\")\ndelta_time sets the minimum time between each voltage update. (std value: 100u\"ms\")\nverbose when true prints info on ramping speed and steps (std value: false)\n\nUnits are handled by the package Unitful.\n\nCurrently set voltage limits can read using get_voltage_limit().\n\nExamples:\n\njulia> psu_h = initialize(SRSPS310)\njulia> set_voltage(psu_h, 11.1u\"V\")\njulia> set_voltage(psu_h, 1100\"mV\")\njulia> set_voltage(psu_h, 100\"V\", delta_volt = 2u\"V\", delta_time=100u\"ms\", verbose=true)\n\nReturns: Nothing\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_voltage_limit-Tuple{TcpInstruments.Instr{SRSPS310}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"Functions","title":"TcpInstruments.set_voltage_limit","text":"set_voltage_limit(::SRSPS310, voltage_limit)\n\nThis will change the voltage limit of a device.\n\nMax Voltage Limit: 1250V\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"functions/#VersatilePower","page":"Functions","title":"VersatilePower","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/power_supply/VersatilePower.jl\"]","category":"page"},{"location":"functions/#TcpInstruments.disable_output-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"Functions","title":"TcpInstruments.disable_output","text":"disable_output(obj::Instr{VersatilePower})\n\nThis will disable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.enable_output-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"Functions","title":"TcpInstruments.enable_output","text":"enable_output(obj::Instr{VersatilePower})\n\nThis will enable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_current_limit-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"Functions","title":"TcpInstruments.get_current_limit","text":"get_current_limit(obj::Instr{VersatilePower})\n\nThis will return the current limit of a device.\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Current Limit\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_output-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"Functions","title":"TcpInstruments.get_output","text":"get_output(obj::Instr{VersatilePower})\n\nThis will return the state of an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\nReturns:   String: {\"OFF\"|\"ON\"}\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"Functions","title":"TcpInstruments.get_voltage","text":"get_voltage(obj::Instr{VersatilePower})\n\nThis will return the voltage of a device\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Voltage\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.local_mode-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"Functions","title":"TcpInstruments.local_mode","text":"local_mode(obj::Instr{VersatilePower})\n\nSet device to remote mode\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.remote_mode-Tuple{TcpInstruments.Instr{VersatilePower}}","page":"Functions","title":"TcpInstruments.remote_mode","text":"remote_mode(obj::Instr{VersatilePower})\n\nSet device to remote mode\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_current_limit-Tuple{TcpInstruments.Instr{VersatilePower}, Union{Unitful.Quantity{T, 𝐈, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐈, U}} where {L, S}} where {T, U}}","page":"Functions","title":"TcpInstruments.set_current_limit","text":"set_current_limit(obj::Instr{VersatilePower}, num::Current)\n\nThis will change the current limit of a device\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"functions/#TcpInstruments.set_voltage-Tuple{TcpInstruments.Instr{VersatilePower}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"Functions","title":"TcpInstruments.set_voltage","text":"set_voltage(obj::Instr{VersatilePower}, num::Voltage)\n\nThis will change the voltage output of a device.\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"functions/#Waveform-Generator","page":"Functions","title":"Waveform Generator","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [TcpInstruments]\nPages = [\"src/waveform_generator/all.jl\"]","category":"page"},{"location":"functions/#Keysight33612A","page":"Functions","title":"Keysight33612A","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/waveform_generator/Keysight33612A.jl\"]","category":"page"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"CurrentModule = TcpInstruments","category":"page"},{"location":"instruments/#Supported-Instruments","page":"Supported Instruments","title":"Supported Instruments","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"A list of all currently supported instruments:","category":"page"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"ImpedanceAnalyzer\nMultiMeter\nOscilloscope\nPowerSupply\nWaveformGenerator","category":"page"},{"location":"instruments/#TcpInstruments.ImpedanceAnalyzer","page":"Supported Instruments","title":"TcpInstruments.ImpedanceAnalyzer","text":"Agilent4294A\nAgilent4395A\n\n\n\n\n\n","category":"type"},{"location":"instruments/#TcpInstruments.MultiMeter","page":"Supported Instruments","title":"TcpInstruments.MultiMeter","text":"KeysightDMM34465A\n\n\n\n\n\n","category":"type"},{"location":"instruments/#TcpInstruments.Oscilloscope","page":"Supported Instruments","title":"TcpInstruments.Oscilloscope","text":"AgilentDSOX4024A\nAgilentDSOX4034A\n\n\n\n\n\n","category":"type"},{"location":"instruments/#TcpInstruments.PowerSupply","page":"Supported Instruments","title":"TcpInstruments.PowerSupply","text":"AgilentE36312A\nSRSPS310\nVersatilePower\n\n\n\n\n\n","category":"type"},{"location":"instruments/#TcpInstruments.WaveformGenerator","page":"Supported Instruments","title":"TcpInstruments.WaveformGenerator","text":"Keysight33612A\n\n\n\n\n\n","category":"type"},{"location":"instruments/#ImpedanceAnalyzer","page":"Supported Instruments","title":"ImpedanceAnalyzer","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) === DataType && t <: ImpedanceAnalyzer && t != ImpedanceAnalyzer","category":"page"},{"location":"instruments/#TcpInstruments.Agilent4294A","page":"Supported Instruments","title":"TcpInstruments.Agilent4294A","text":"http://literature.cdn.keysight.com/litweb/pdf/04294-90061.pdf\n\nAvailable functions\n\ninitialize()\nterminate()\nget_impedance\nget_bandwidth\nset_bandwidth\nget_volt_ac\nset_volt_ac\nget_channel\nset_channel\n\n\n\n\n\n","category":"type"},{"location":"instruments/#TcpInstruments.Agilent4395A","page":"Supported Instruments","title":"TcpInstruments.Agilent4395A","text":"http://literature.cdn.keysight.com/litweb/pdf/04395-90031.pdf\n\nAvailable functions\n\ninitialize()\nterminate()\nget_frequency_range()\n`setfrequencyrange([start, stop]) # in hertz)\nget_num_data_points(x)\nnumber of points on x-axis / number of samples\nset_num_data_points(x)\nget_impedance() # get the data\nset_volt_ac\nget_volt_ac\nget_volt_dc\nset_volt_dc\nbandwidth ({1,2,3,4,5})\n1 -> lowest bandwidth, 35 -> highest bandwidth\n\n\n\n\n\n","category":"type"},{"location":"instruments/#Oscilloscope","page":"Supported Instruments","title":"Oscilloscope","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) === DataType && t <: Oscilloscope && t != Oscilloscope","category":"page"},{"location":"instruments/#MultiMeter","page":"Supported Instruments","title":"MultiMeter","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) === DataType && t <: MultiMeter && t != MultiMeter","category":"page"},{"location":"instruments/#TcpInstruments.KeysightDMM34465A","page":"Supported Instruments","title":"TcpInstruments.KeysightDMM34465A","text":"Available functions\n\ninitialize\nterminate\nget_tc_temperature (tc = thermocouple)\nget_voltage\nget_current\nget_resistance(;wire) # wire must be set to 2 or 4\nget_channel # (some kind of input detection not selection)\n\n\n\n\n\n","category":"type"},{"location":"instruments/#PowerSupply","page":"Supported Instruments","title":"PowerSupply","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) === DataType && t <: PowerSupply && t != PowerSupply","category":"page"},{"location":"instruments/#TcpInstruments.AgilentE36312A","page":"Supported Instruments","title":"TcpInstruments.AgilentE36312A","text":"Available functions\n\nenable_output()\ndisable_output()\nset_voltage(voltage)\nget_voltage()\nset_current_limit(current)\nget_current_limit()\nset_channel(channel)\nget_channel()\n\n\n\n\n\n","category":"type"},{"location":"instruments/#TcpInstruments.SRSPS310","page":"Supported Instruments","title":"TcpInstruments.SRSPS310","text":"SRSPS310\nGPIB Enabled Device. Requires an attached Prologix Controller to work.\n\nAvailable functions\n\nenable_output()\ndisable_output()\nset_voltage(volts)\nget_voltage()\nset_voltage_limit(volts)\nget_voltage_limit()\nset_current_limit(current)\nget_current_limit()\nset_prologix_chan(chan)\nget_prologix_chan(chan)\n\n\n\n\n\n","category":"type"},{"location":"instruments/#TcpInstruments.VersatilePower","page":"Supported Instruments","title":"TcpInstruments.VersatilePower","text":"This device only has one channel so channel specific functions and optional arguments are not available.\n\nAvailable functions\n\nenable_output(obj::Instr{VersatilePower})\ndisable_output(obj::Instr{VersatilePower})\nset_voltage(obj::Instr{VersatilePower})\nget_voltage(obj::Instr{VersatilePower})\nset_current_limit(obj::Instr{VersatilePower}, current)\nget_current_limit(obj::Instr{VersatilePower})\n\nHelpers\n\nremote_mode(): sets the device to remote mode. Automatically called on initialize\nlocal_mode(): sets the device to local mode. Automatically called on terminate\n\nThis instrument has a remote and local mode. Some commands do not work while the device is in local mode, thus when initializing this device remote_mode is called automatically and the device is always in remote mode by default.\n\nThese functions should not be directly needed but if for some reason you need to switch modes while using the device you can use local_mode to turn the device back to local mode.\n\n\n\n\n\n","category":"type"},{"location":"instruments/#WaveformGenerator","page":"Supported Instruments","title":"WaveformGenerator","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) === DataType && t <: WaveformGenerator && t != WaveformGenerator","category":"page"},{"location":"#TcpInstruments.jl","page":"Home","title":"TcpInstruments.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TcpInstruments allows you to control a variety of internet-enabled instruments","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TcpInstruments can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add TcpInstruments","category":"page"},{"location":"#General-Usage","page":"Home","title":"General Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To connect to an instrument you must know its model and IP address:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TcpInstruments\ninstrument_handle = initialize(AgilentDSOX4034A, \"10.1.30.32\")\ninfo(instrument_handle)\ndata = get_data(instrument_handle)\nsave(data)","category":"page"},{"location":"","page":"Home","title":"Home","text":"When you are done you can close your connection:","category":"page"},{"location":"","page":"Home","title":"Home","text":"terminate(instrument_handle)","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you do not know the ip address of any devices on your network:","category":"page"},{"location":"","page":"Home","title":"Home","text":"scan_network()","category":"page"},{"location":"","page":"Home","title":"Home","text":"By default scan_network will check the addresses between 10.1.30.1 to 10.1.30.255 but you may need to scan a different range, say: 10.1.150.1-255","category":"page"},{"location":"","page":"Home","title":"Home","text":"scan_network(; ip_network=\"10.1.150.\")","category":"page"}]
}
